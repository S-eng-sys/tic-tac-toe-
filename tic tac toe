import java.util.Scanner;
import java.util.Random;

public class TicTacToe {
    private static char[][] board = {
            {'1', '2', '3'},
            {'4', '5', '6'},
            {'7', '8', '9'}
    };
    private static char currentPlayer = 'X';
    private static boolean isSinglePlayer = false;
    
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.println("Welcome to Tic-Tac-Toe!");
        System.out.print("Do you want to play against the computer? (yes/no): ");
        String choice = scanner.next().toLowerCase();
        isSinglePlayer = choice.equals("yes");
        
        printBoard();
        boolean gameWon = false;
        int moves = 0;

        while (!gameWon && moves < 9) {
            if (currentPlayer == 'X' || !isSinglePlayer) {
                System.out.println("Player " + currentPlayer + ", enter your move (1-9): ");
                int move = scanner.nextInt();
                if (isValidMove(move)) {
                    makeMove(move);
                } else {
                    System.out.println("Invalid move. Try again.");
                    continue;
                }
            } else {
                computerMove();
            }
            
            printBoard();
            gameWon = checkWin();
            if (gameWon) {
                System.out.println("Player " + currentPlayer + " wins!");
                break;
            }
            currentPlayer = (currentPlayer == 'X') ? 'O' : 'X';
            moves++;
        }

        if (!gameWon) {
            System.out.println("It's a draw!");
        }
        
        scanner.close();
    }

    private static void printBoard() {
        System.out.println();
        for (char[] row : board) {
            for (char cell : row) {
                System.out.print(" " + cell + " ");
            }
            System.out.println();
        }
        System.out.println();
    }

    private static boolean isValidMove(int move) {
        if (move < 1 || move > 9) return false;
        int row = (move - 1) / 3;
        int col = (move - 1) % 3;
        return board[row][col] >= '1' && board[row][col] <= '9';
    }

    private static void makeMove(int move) {
        int row = (move - 1) / 3;
        int col = (move - 1) % 3;
        board[row][col] = currentPlayer;
    }

    private static void computerMove() {
        Random rand = new Random();
        int move;
        do {
            move = rand.nextInt(9) + 1;
        } while (!isValidMove(move));
        System.out.println("Computer chooses: " + move);
        makeMove(move);
    }

    private static boolean checkWin() {
        for (int i = 0; i < 3; i++) {
            if ((board[i][0] == currentPlayer && board[i][1] == currentPlayer && board[i][2] == currentPlayer) ||
                (board[0][i] == currentPlayer && board[1][i] == currentPlayer && board[2][i] == currentPlayer)) {
                return true;
            }
        }
        return (board[0][0] == currentPlayer && board[1][1] == currentPlayer && board[2][2] == currentPlayer) ||
               (board[0][2] == currentPlayer && board[1][1] == currentPlayer && board[2][0] == currentPlayer);
    }
}